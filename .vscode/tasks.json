  {
      "label": "2. Build",
      "type": "shell",
      "command": "tsc",
      "dependsOn": ["1. Lint"],
      "problemMatcher": ["$tsc"],
      "group": "build"
    },
    {
      "label": "3. Test",
      "type": "shell",
      "command": "npm test",
      "dependsOn": ["2. Build"],
      "problemMatcher": [],
      "group": "test"
    },
    {
      "label": "4. Upload to GCS",
      "type": "shell",
      "command": "gsutil -m cp -r dist gs://your-bucket-name/builds/",
      "dependsOn": ["3. Test"],
      "problemMatcher": [],
      "group": "build"
    },
    {
      "label": "5. Deploy to Cloud Run",
      "type": "shell",
      "command": "./deploy.sh",
      "dependsOn": ["4. Upload to GCS"],
      "problemMatcher": [],
      "group": "build"
    },
    {
      "label": "🚀 Full Deploy",
      "dependsOn": [
        "1. Lint",
        "2. Build",
        "3. Test",
        "4. Upload to GCS",
        "5. Deploy to Cloud Run"
      ],
      "dependsOrder": "sequence",
      "problemMatcher": [],
      "group": {
        "kind": "build",
          "isDefault": true}
         { // scripts/deploy.js

import { create } from 'ipfs-http-client';
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import axios from 'axios';

const IPFS_API = 'https://ipfs.infura.io:5001';
const PUBLIC_DIR = './frontend/dist'; // adjust if needed

async function uploadToIPFS() {
  const client = create({ url: IPFS_API });
  const files = [];

  function walk(dir) {
    const entries = fs.readdirSync(dir);
    for (const file of entries) {
      const filepath = path.join(dir, file);
      const stats = fs.statSync(filepath);
      if (stats.isDirectory()) {
        walk(filepath);
      } else {
        files.push({
          path: path.relative(PUBLIC_DIR, filepath),
          content: fs.readFileSync(filepath)
        };
{ walk(PUBLIC_DIR); const result = await client.addAll(files, { wrapWithDirectory: true });
  let root;
  for await (const file of result) {
    if (!file.path) root = file;
  }

  return `ipfs://${root.cid}`;
}

async function updateUnstoppable(ipfsHash) {
  const domain = 'elparadisogonzalo.com';
  const token = process.env.UNSTOPPABLE_API_KEY;
  if (!token) throw new Error('Missing UNSTOPPABLE_API_KEY in env');

  const url = `https://api.unstoppabledomains.com/v1/domains/${domain}/records/ipfs.html.value`;
  await axios.put(
    url,
    { value: ipfsHash },
    { headers: { Authorization: `Bearer ${token}` } }
  );
  console.log(`🔗 Domain updated: ${domain} → ${ipfsHash}`);
}

function runCI() {
  try {
    execSync(`gh workflow run deploy.yml`, { stdio: 'inherit' });
  } catch (err) {
    console.warn('⚠️ GitHub Actions trigger failed:', err.message);
  }
}

function publishToNpm() {
  try {
    execSync('npm publish', { stdio: 'inherit' });
  } catch (err) {
    console.warn('⚠️ NPM publish failed:', err.message);
  }
}

async function main() {
  console.log('🏗️ Building project...');
  execSync('npm run build', { stdio: 'inherit' });

  console.log('🚚 Uploading to IPFS...');
  const ipfsHash = await uploadToIPFS();
  console.log(`✅ IPFS upload complete: ${ipfsHash}`);

  console.log('🌐 Updating Unstoppable Domain...');
  await updateUnstoppable(ipfsHash);

  console.log('🚀 Triggering CI/CD...');
  runCI();

  console.log('📦 Publishing to npm...');
  publishToNpm();

  console.log('✅ Deploy complete!');
}

main().catch(err => {
  console.error('❌ Deploy failed:', err);
  process.exit(1);
});

      }
    }
  ]
}
